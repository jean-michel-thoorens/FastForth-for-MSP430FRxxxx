

MARKER {PID}

[UNDEFINED] VARIABLE [IF]
: VARIABLE 
CREATE
HI2LO
MOV @R1+,R13
MOV #$1287,-4(R10)
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] CONSTANT [IF]
: CONSTANT 
CREATE
HI2LO
MOV R14,-2(R10)
MOV @R15+,R14
MOV @R1+,R13
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] STATE [IF]
$1DBC CONSTANT STATE
[THEN]

[UNDEFINED] ROT [IF]
CODE ROT
MOV @R15,R10
MOV R14,0(R15)
MOV 2(R15),R14
MOV R10,2(R15)
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] SWAP [IF]
CODE SWAP
MOV @R15,R10
MOV R14,0(R15)
MOV R10,R14
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] DUP [IF]
CODE DUP
BW1 SUB #2,R15
    MOV R14,0(R15)
    MOV @R13+,R0
ENDCODE

CODE ?DUP
CMP #0,R14
0<> ?GOTO BW1
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] AND [IF]
CODE AND
AND @R15+,R14
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] SPACE [IF]
: SPACE
$20 EMIT ;
[THEN]

[UNDEFINED] R> [IF]
CODE R>
MOV R7,R0
ENDCODE
[THEN]

[UNDEFINED] @ [IF]
CODE @
MOV @R14,R14
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] ! [IF]
CODE !
MOV @R15+,0(R14)
MOV @R15+,R14
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] C@ [IF]
CODE C@
MOV.B @R14,R14
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] 1+ [IF]
CODE 1+
ADD #1,R14
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] + [IF]
CODE +
ADD @R15+,R14
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] - [IF]
CODE -
SUB @R15+,R14
XOR #-1,R14
ADD #1,R14
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] MAX [IF]
CODE MAX
    CMP @R15,R14
    S<  ?GOTO FW1
BW1 ADD #2,R15
    MOV @R13+,R0
ENDCODE

CODE MIN
    CMP @R15,R14
    S< ?GOTO BW1
FW1 MOV @R15+,R14
    MOV @R13+,R0
ENDCODE
[THEN]


[UNDEFINED] 2NIP [IF]
CODE 2NIP
MOV @R15,R9
ADD #4,R15
MOV R9,0(R15)
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] 2DUP  [IF]
CODE 2DUP
SUB #4,R15
MOV R14,2(R15)
MOV 4(R15),0(R15)
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] 2SWAP [IF]
CODE 2SWAP
MOV @R15,R10
MOV 4(R15),0(R15)
MOV R10,4(R15)
MOV R14,R10
MOV 2(R15),R14
MOV R10,2(R15)
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] 2ROT [IF]
CODE 2ROT
MOV 8(R15),R9
MOV 6(R15),R8
MOV 4(R15),8(R15)
MOV 2(R15),6(R15)
MOV @R15,4(R15)
MOV R14,2(R15)
MOV R9,0(R15)
MOV R8,R14
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] 2DROP [IF]
CODE 2DROP
ADD #2,R15
MOV @R15+,R14
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] 2OVER [IF]
CODE 2OVER
SUB #4,R15
MOV R14,2(R15)
MOV 8(R15),0(R15)
MOV 6(R15),R14
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] DABS [IF]
CODE DABS
AND #-1,R14
U< IF
    XOR #-1,0(R15)
    XOR #-1,R14
    ADD #1,0(R15)
    ADDC #0,R14
THEN
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] 2@ [IF]


    CODE 2@
    SUB #2,R15
    MOV 2(R14),0(R15)
    MOV @R14,R14
    MOV @R13+,R0
    ENDCODE
[THEN]

[UNDEFINED] 2! [IF]


    CODE 2!
    MOV @R15+,0(R14)
    MOV @R15+,2(R14)
    MOV @R15+,R14
    MOV @R13+,R0
    ENDCODE
[THEN]

CODE 2>R
PUSH @R15+
PUSH R14
MOV @R15+,R14
MOV @R13+,R0
ENDCODE

CODE 2R@
SUB #4,R15
MOV R14,2(R15)
MOV @R1,R14
MOV 2(R1),0(R15)
MOV @R13+,R0
ENDCODE

CODE 2R>
SUB #4,R15
MOV R14,2(R15)
MOV @R1+,R14       
MOV @R1+,0(R15)
MOV @R13+,R0
ENDCODE

[UNDEFINED] 2VARIABLE [IF]
: 2VARIABLE
CREATE 4 ALLOT
;
[THEN]

[UNDEFINED] 2CONSTANT [IF]

    : 2CONSTANT
    CREATE , ,
    DOES> 2@
    ;
[THEN]

[UNDEFINED] <> [IF]
CODE <>
SUB @R15+,R14
0<> IF 
    MOV #-1,R14
THEN
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] = [IF]
CODE =
SUB @R15+,R14
0<> IF
    AND #0,R14
    MOV @R13+,R0
THEN
XOR #-1,R14
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] U< [IF]
CODE U<
SUB @R15+,R14
0<> IF
    MOV #-1,R14
    U< IF
        AND #0,R14
    THEN
THEN
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] IF [IF]
CODE IF
SUB #2,R15
MOV R14,0(R15)
MOV &$1DC8,R14
ADD #4,&$1DC8
MOV #$40AC,0(R14)
ADD #2,R14
MOV @R13+,R0
ENDCODE IMMEDIATE
[THEN]

[UNDEFINED] THEN [IF]
CODE THEN
MOV &$1DC8,0(R14)
MOV @R15+,R14
MOV @R13+,R0
ENDCODE IMMEDIATE
[THEN]

[UNDEFINED] ELSE [IF]
CODE ELSE
ADD #4,&$1DC8
MOV &$1DC8,R10
MOV #$40B2,-4(R10)
MOV R10,0(R14)
SUB #2,R10
MOV R10,R14
MOV @R13+,R0
ENDCODE IMMEDIATE
[THEN]

[UNDEFINED] DEFER! [IF]
CODE DEFER!
MOV @R15+,2(R14)
MOV @R15+,R14
MOV @R13+,R0
ENDCODE
[THEN]

[UNDEFINED] IS [IF]
: IS
STATE @
IF  POSTPONE ['] POSTPONE DEFER! 
ELSE ' DEFER! 
THEN
; IMMEDIATE
[THEN]

[UNDEFINED] >BODY [IF]
CODE >BODY
ADD #4,R14
MOV @R13+,R0
ENDCODE
[THEN]

CODE F+
BW1 ADD @R15+,2(R15)
    ADDC @R15+,R14
    MOV @R13+,R0
ENDCODE

CODE F-
BW1 SUB @R15+,2(R15)
    SUBC R14,0(R15)
    MOV @R15+,R14
    MOV @R13+,R0
ENDCODE

CODE HOLDS
BW3         MOV @R15+,R9
            ADD R14,R9
            MOV &$1DB2,R8
BEGIN       SUB #1,R9
            SUB #1,R14
U>= WHILE   SUB #1,R8
            MOV.B @R9,0(R8)
REPEAT      MOV R8,&$1DB2
            MOV @R15+,R14
            MOV @R13+,R0
ENDCODE

$1A00 4 + @ $81F3 U<
$81EF $1A00 4 + @ U< 
= [IF]   ; MSP430FR2xxx|MSP430FR4xxx subfamilies without hardware_MPY


CODE F/
        PUSHM #4,R7    
        MOV @R15+,R6
        MOV @R15+,R9
        MOV #0,R10
        MOV @R15,R8
        MOV #0,R11
        MOV R9,R12
        XOR R14,R12
        AND #-1,R9
S< IF   XOR #-1,R8
        XOR #-1,R9
        ADD #1,R8
        ADDC #0,R9
THEN    AND #-1,R14
S< IF   XOR #-1,R6
        XOR #-1,R14
        ADD #1,R6
        ADDC #0,R14
THEN
            MOV #32,R5
BW1         CMP R14,R10
    0= IF   CMP R6,R9
    THEN
    U>= IF  SUB R6,R9
            SUBC R14,R10
    THEN
BW2         ADDC R7,R7
            ADDC R4,R4
            SUB #1,R5
            0< ?GOTO FW1
            ADD R11,R11
            ADDC R8,R8
            ADDC R9,R9
            ADDC R10,R10
            U< ?GOTO BW1
            SUB R6,R9
            SUBC R14,R10
            BIS #1,R2
            GOTO BW2
FW1
            MOV R7,0(R15)
            MOV R4,R14
            POPM #4,R7
BW1     AND #-1,R12
S< IF   XOR #-1,0(R15)
        XOR #-1,R14
        ADD #1,0(R15)
        ADDC #0,R14
THEN    MOV @R13+,R0
ENDCODE

CODE F#S 
            MOV 2(R15),R9
            MOV @R15,2(R15)
            MOV R9,0(R15)
            PUSHM #2,R14
            MOV #0,R12
BEGIN       PUSH R12
            MOV &$1DBE,R14
            LO2HI
            UM*
            HI2LO
            SUB #2,R13
            CMP #10,R14
    U>= IF  ADD #7,R14
    THEN    ADD #$30,R14
            MOV @R1+,R12
            MOV.B R14,$1D90(R12)
            ADD #1,R12
            CMP 2(R1),R12
U>= UNTIL   
            POPM #2,R14
            MOV #0,0(R15)
            SUB #2,R15
            MOV #$1D90,0(R15)
            GOTO BW3
ENDCODE

CODE UDM*
            PUSH R13
            PUSHM #4,R7
            MOV 4(R15),R13
            MOV 2(R15),R11
            MOV @R15,R10
            MOV #0,R4
            MOV #0,R5
            MOV #0,4(R15)
            MOV #0,2(R15)
            MOV #0,R6
            MOV #0,R7
            MOV #1,R9
            MOV #0,R8
BEGIN       CMP #0,R9    
    0<> IF  BIT R9,R10
    ELSE    BIT R8,R14
    THEN
    0<> IF  ADD R13,4(R15)
            ADDC R11,2(R15)
            ADDC R4,R6
            ADDC R5,R7
    THEN    ADD R13,R13
            ADDC R11,R11
            ADDC R4,R4
            ADDC R5,R5
            ADD R9,R9
            ADDC R8,R8
U>= UNTIL   MOV R6,0(R15)
            MOV R7,R14
            POPM #4,R7
            MOV @R1+,R13
            MOV @R13+,R0
ENDCODE

CODE F*
    MOV 2(R15),R12
    XOR R14,R12
    BIT #$8000,2(R15)
0<> IF  XOR #-1,2(R15)
        XOR #-1,4(R15)
        ADD #1,4(R15)
        ADDC #0,2(R15)
THEN
    COLON
    DABS UDM*
    HI2LO
    MOV @R1+,R13
    MOV @R15+,R14
    MOV @R15+,0(R15)
    GOTO BW1
ENDCODE

[ELSE]

CODE F/
        PUSHM #4,R7
        MOV @R15+,R6
        MOV @R15+,R9
        MOV #0,R10
        MOV @R15,R8
        MOV #0,R11
        MOV R9,R12
        XOR R14,R12
        AND #-1,R9
S< IF   XOR #-1,R8
        XOR #-1,R9
        ADD #1,R8
        ADDC #0,R9
THEN    AND #-1,R14
S< IF   XOR #-1,R6
        XOR #-1,R14
        ADD #1,R6
        ADDC #0,R14
THEN    MOV #32,R5
BW1     CMP R14,R10
    0= IF
        CMP R6,R9
    THEN
    U>= IF
        SUB R6,R9
        SUBC R14,R10
    THEN
BW2     ADDC R7,R7
        ADDC R4,R4
        SUB #1,R5
        0< ?GOTO FW1
        ADD R11,R11
        ADDC R8,R8
        ADDC R9,R9
        ADDC R10,R10
        U< ?GOTO BW1
        SUB R6,R9
        SUBC R14,R10
        BIS #1,R2
        GOTO BW2
FW1     AND #-1,R12
S< IF   XOR #-1,R7
        XOR #-1,R4
        ADD #1,R7
        ADDC #0,R4
THEN    MOV R7,0(R15)
        MOV R4,R14
        POPM #4,R7
        MOV @R13+,R0
ENDCODE

CODE F#S
            MOV 2(R15),R9
            MOV @R15,2(R15)
            MOV R9,0(R15)
            MOV R14,R11
            MOV #0,R12
BEGIN       MOV @R15,&$4C0
            MOV &$1DBE,&$4C8
            MOV &$4E4,0(R15)
            MOV &$4E6,R14
            CMP #10,R14
    U>= IF  ADD #7,R14
    THEN    ADD #$30,R14
            MOV.B R14,$1D90(R12)
            ADD #1,R12
            CMP R11,R12
0= UNTIL    MOV #0,0(R15)
            MOV R11,R14
            SUB #2,R15
            MOV #$1D90,0(R15)
            GOTO BW3
ENDCODE

CODE F*
    MOV 4(R15),&$4D4
    MOV 2(R15),&$4D6
    MOV @R15,&$4E0
    MOV R14,&$4E2
    ADD #4,R15
    MOV &$4E6,0(R15)
    MOV &$4E8,R14
    MOV @R13+,R0
ENDCODE

[THEN]

CODE F.N
MOV R14,R11
MOV @R15+,R14
MOV R14,R12
PUSHM #3,R13
LO2HI
    <# DABS
    R> F#S
    $2C HOLD
    #S
    R> SIGN #>
    TYPE SPACE
;


CODE D<
            MOV @R15+,R12
            MOV @R15+,R11
            MOV @R15+,R10
BW1         CMP R14,R11
            MOV #0,R14
S< IF       MOV #-1,R14
THEN
0= IF       CMP R12,R10
    S< IF   MOV #-1,R14
    THEN
THEN
MOV @R13+,R0
ENDCODE

CODE D>
MOV R14,R11
MOV @R15+,R10
MOV @R15+,R14
MOV @R15+,R12
GOTO BW1
ENDCODE

CODE S2F
    SUB #2,R15
    MOV #0,0(R15)
    MOV @R13+,R0
ENDCODE

: F2S
  SWAP $8000 AND IF 1 + THEN ;

: DMIN
  2OVER 2OVER
  D< IF 2DROP ELSE 2NIP THEN
;

: DMAX
  2OVER 2OVER
  D> IF 2DROP ELSE 2NIP THEN
;

: DRANGE
  2ROT DMIN DMAX
;

: RANGE
  ROT MIN MAX
;

: F.000 3 F.N ;

2VARIABLE KP
2VARIABLE KI
2VARIABLE KD
VARIABLE SETPOINT

VARIABLE SAMPLE_TIME
VARIABLE OUT_MAX
VARIABLE OUT_MIN
VARIABLE OUT-OVERRIDE

VARIABLE SET-VAL
VARIABLE INPUT_PREV
2VARIABLE I_SUM

VARIABLE DEBUG
0 DEBUG !

: ?DEBUG DEBUG @ ;



: CALC-R6
KP 2@ F*
?DEBUG IF ." Pval:" 2DUP F2S . 
THEN    
;


: CALC-I
KI 2@ F*
I_SUM 2@ F+
OUT_MIN @ S2F 
OUT_MAX @ S2F
DRANGE
2DUP I_SUM 2!
?DEBUG IF  ." Ival:" 2DUP F2S . 
THEN
;

: CALC-D

  INPUT_PREV @ -
  S2F KD 2@ F*
?DEBUG IF  ." Dval:" 2DUP F2S . 
THEN
;

: PID_COMPUTE
DUP DUP SET-VAL @ SWAP - S2F
2DUP  CALC-R6
2SWAP CALC-I F+
ROT   CALC-D F-

F2S
?DEBUG IF  ." OUT:" DUP .
THEN
SWAP INPUT_PREV !
OUT_MIN @ OUT_MAX @ RANGE
?DEBUG IF  ." PWM:" DUP .
THEN
;


: SET
  SET-VAL ! ;

: TUNING


  SAMPLE_TIME @ S2F 1000,0 F/ 2>R

  2R@ F/ KD 2!
  2R> F* KI 2!
         KP 2! ;

: PID-INIT
  OUT_MAX !
  OUT_MIN !
  SAMPLE_TIME !
  TUNING
  0 OUT-OVERRIDE !
  CR ." PID initialized - kp:" KP 2@ F.000 ." ki:" KI 2@ F.000 ." kd:" KD 2@ F.000
;

: PID
  OUT-OVERRIDE @ -1 = IF
    PID_COMPUTE
  ELSE
    CR ." SET:" SET-VAL @ .  ." IS:"  DUP .
    INPUT_PREV !
    OUT-OVERRIDE @
    ." PWM:" DUP .
  THEN ;

: MANUAL
  OUT-OVERRIDE ! ;


: AUTO
  OUT-OVERRIDE @ -1 <> IF

    OUT-OVERRIDE @
    OUT_MIN @ OUT_MAX @ RANGE
    S2F I_SUM 2!
    -1 OUT-OVERRIDE !
  THEN ;

: AUTOHOLD
  INPUT_PREV @ SET-VAL !
  AUTO ;




CODE STOP
    MOV @R13+,R0
ENDCODE

CODE APP_INIT
    MOV @R13+,R0
ENDCODE

CODE START
    MOV @R13+,R0
ENDCODE 


ECHO
